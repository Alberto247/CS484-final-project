"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const debug_1 = __importDefault(require("debug"));
const base_1 = __importDefault(require("../api/base"));
const log = (0, debug_1.default)('ebay:oauth2');
/**
 * https://developer.ebay.com/api-docs/static/oauth-tokens.html
 *
 * Client credentials grant flow mints a new Application access token that you can use to access the resources owned by the application.
 * Authorization code grant flow mints a new User access token that you can use to access the resources owned by the user.
 */
class OAuth2 extends base_1.default {
    constructor() {
        super(...arguments);
        this.scope = this.config.scope || OAuth2.defaultScopes;
    }
    static generateAuthUrl(sandbox, appId, ruName, scope, state = '') {
        return [
            sandbox ? OAuth2.AUTHORIZE_ENDPOINT.sandbox : OAuth2.AUTHORIZE_ENDPOINT.production,
            '?client_id=', encodeURIComponent(appId),
            '&redirect_uri=', encodeURIComponent(ruName),
            '&response_type=code',
            '&state=', encodeURIComponent(state),
            '&scope=', encodeURIComponent(scope.join(' '))
        ].join('');
    }
    get identityEndpoint() {
        return this.config.sandbox ? OAuth2.IDENTITY_ENDPOINT.sandbox : OAuth2.IDENTITY_ENDPOINT.production;
    }
    /**
     * Return the access token.
     * First return user access token, if not set Application Access Token.
     */
    async getAccessToken() {
        return this.getUserAccessToken() || this.getApplicationAccessToken();
    }
    getUserAccessToken() {
        return this._authToken?.access_token ?? null;
    }
    async getApplicationAccessToken() {
        if (this._clientToken) {
            log('Return existing application access token: ', this._clientToken);
            return this._clientToken.access_token;
        }
        try {
            const token = await this.obtainApplicationAccessToken();
            return token.access_token;
        }
        catch (error) {
            throw error;
        }
    }
    setClientToken(clientToken) {
        this._clientToken = clientToken;
    }
    setScope(scope) {
        this.scope = scope;
    }
    getScope() {
        return [...this.scope];
    }
    /**
     * Client credentials grant flow.
     */
    async mintApplicationAccessToken() {
        if (!this.config.appId) {
            throw new Error('Missing App ID (Client Id)');
        }
        if (!this.config.certId) {
            throw new Error('Missing Cert Id (Client Secret)');
        }
        try {
            const response = await this.req.postForm(this.identityEndpoint, {
                scope: this.scope.join(' '),
                grant_type: 'client_credentials'
            }, {
                auth: {
                    username: this.config.appId,
                    password: this.config.certId
                }
            });
            return response.data;
        }
        catch (error) {
            log('Failed to mint application token', error);
            throw error;
        }
    }
    /**
     * Client credentials grant flow.
     */
    async obtainApplicationAccessToken() {
        log('Obtain a new application access token with scope: ', this.scope.join(','));
        try {
            const token = await this.mintApplicationAccessToken();
            log('Obtained a new application access token:', token);
            this.setClientToken(token);
            this.emit('refreshClientToken', token);
            return token;
        }
        catch (error) {
            log('Failed to obtain application token', error);
            throw error;
        }
    }
    /**
     * Generates URL for consent page landing.
     *
     * @param ruName RuName
     * @param scope the scopes
     * @param state state parameter returned in the redirect URL
     */
    generateAuthUrl(ruName, scope = this.scope, state = '') {
        ruName = ruName || this.config.ruName;
        if (!ruName) {
            throw new Error('RuName is required.');
        }
        return OAuth2.generateAuthUrl(this.config.sandbox, this.config.appId, ruName, scope, state);
    }
    /**
     * Authorization code grant flow.
     *
     * Mint the user access token for the given code.
     *
     * @param code the code
     * @param ruName the redirectUri
     */
    async mintUserAccessToken(code, ruName = this.config.ruName) {
        try {
            const response = await this.req.postForm(this.identityEndpoint, {
                grant_type: 'authorization_code',
                code,
                redirect_uri: ruName
            }, {
                auth: {
                    username: this.config.appId,
                    password: this.config.certId
                }
            });
            const token = response.data;
            log('User Access Token', token);
            return token;
        }
        catch (error) {
            log('Failed to get the token', error);
            throw error;
        }
    }
    /**
     * Authorization code grant flow.
     *
     * Mint the access token for the given code.
     *
     * @param code the code
     * @param ruName the redirectUri
     */
    async getToken(code, ruName = this.config.ruName) {
        return await this.mintUserAccessToken(code, ruName);
    }
    /**
     * Authorization code grant flow.
     */
    async refreshUserAccessToken() {
        if (!this._authToken || !this._authToken.refresh_token) {
            log('Tried to refresh user access token before it was set.');
            throw new Error('Failed to refresh the user access token. Token or refresh_token is not set.');
        }
        try {
            const response = await this.req.postForm(this.identityEndpoint, {
                grant_type: 'refresh_token',
                refresh_token: this._authToken.refresh_token,
                scope: this.scope.join(' ')
            }, {
                auth: {
                    username: this.config.appId,
                    password: this.config.certId
                }
            });
            const token = response.data;
            log('Successfully refreshed token', token);
            const refreshedToken = {
                ...this._authToken,
                ...token
            };
            this.setCredentials(refreshedToken);
            this.emit('refreshAuthToken', refreshedToken);
            return refreshedToken;
        }
        catch (error) {
            log('Failed to refresh the token', error);
            throw error;
        }
    }
    /**
     * Gets and sets the user access token for the given code.
     *
     * Authorization code grant flow.
     *
     * @param code the code
     */
    async obtainToken(code) {
        const token = await this.getToken(code);
        log('Obtain user access token', token);
        this.setCredentials(token);
        return token;
    }
    getCredentials() {
        if (this._authToken) {
            return {
                ...this._authToken
            };
        }
        else if (this._clientToken) {
            return {
                ...this._clientToken
            };
        }
        return null;
    }
    setCredentials(authToken) {
        if (typeof authToken === 'string') {
            this._authToken = {
                refresh_token: '',
                expires_in: 7200,
                refresh_token_expires_in: 47304000,
                token_type: 'User Access Token',
                access_token: authToken
            };
        }
        else {
            this._authToken = authToken;
        }
    }
    /**
     * Refresh the user access token if set or application access token
     */
    async refreshToken() {
        if (this._authToken) {
            return await this.refreshUserAccessToken();
        }
        else if (this._clientToken) {
            return await this.obtainApplicationAccessToken();
        }
        throw new Error('Missing credentials. To refresh a token an application access token or user access token must be already set.');
    }
}
exports.default = OAuth2;
// If all the calls in our application require just an Application access token we can use this endpoint
OAuth2.IDENTITY_ENDPOINT = {
    production: 'https://api.ebay.com/identity/v1/oauth2/token',
    sandbox: 'https://api.sandbox.ebay.com/identity/v1/oauth2/token'
};
OAuth2.AUTHORIZE_ENDPOINT = {
    production: 'https://auth.ebay.com/oauth2/authorize',
    sandbox: 'https://auth.sandbox.ebay.com/oauth2/authorize'
};
OAuth2.defaultScopes = ['https://api.ebay.com/oauth/api_scope'];
//# sourceMappingURL=oAuth2.js.map