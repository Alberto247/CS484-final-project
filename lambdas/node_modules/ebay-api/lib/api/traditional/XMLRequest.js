"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultHeaders = exports.defaultApiConfig = exports.defaultXML2JSONParseOptions = exports.defaultJSON2XMLOptions = void 0;
const debug_1 = __importDefault(require("debug"));
const fast_xml_parser_1 = __importStar(require("fast-xml-parser"));
const errors_1 = require("../../errors");
const log = (0, debug_1.default)('ebay:xml:request');
exports.defaultJSON2XMLOptions = {
    attributeNamePrefix: '@_',
    textNodeName: '#value',
    ignoreAttributes: false,
    cdataTagName: '__cdata',
    cdataPositionChar: '\\c',
    format: false,
    indentBy: '  ',
    suppressEmptyNode: false
};
exports.defaultXML2JSONParseOptions = {
    attributeNamePrefix: '',
    textNodeName: 'value',
    ignoreAttributes: false,
    parseAttributeValue: true,
    parseNodeValue: true,
    ignoreNameSpace: true,
    parseTrueNumberOnly: true,
    arrayMode: (_, parentTageName) => {
        return /Array$/.test(parentTageName);
    }
};
exports.defaultApiConfig = {
    raw: false,
    parseOptions: exports.defaultXML2JSONParseOptions,
    useIaf: true,
    headers: {},
    returnResponse: false
};
exports.defaultHeaders = {
    'Content-Type': 'text/xml'
};
/**
 * XML request for making eBay API call.
 */
class XMLRequest {
    /**
     * Creates the new Request object
     *
     * @private
     * @param      {string}  callName the callname
     * @param      {Object}  fields the fields
     * @param      {Object} req the request
     * @param      {XMLReqConfig}  config
     */
    constructor(callName, fields, config, req) {
        if (!callName) {
            throw new errors_1.EbayNoCallError();
        }
        this.callName = callName;
        this.fields = fields || {};
        this.config = { ...exports.defaultApiConfig, ...config };
        this.req = req;
    }
    /**
     * returns the expected name of XML node of a Request
     *
     * @private
     * @return     {String}  callnameReponse
     */
    getResponseWrapper() {
        return `${this.callName}Response`;
    }
    /**
     * returns the XML structure for the SOAP auth
     *
     * @private
     * @return     {Object}  the RequesterCredentials
     */
    getCredentials() {
        return this.config.eBayAuthToken ? {
            RequesterCredentials: {
                eBayAuthToken: this.config.eBayAuthToken
            }
        } : {};
    }
    getParseOptions() {
        return {
            ...exports.defaultXML2JSONParseOptions,
            ...this.config.parseOptions
        };
    }
    getHeaders() {
        return {
            ...exports.defaultHeaders,
            ...this.config.headers,
        };
    }
    /**
     * Converts an XML response to JSON
     *
     * @param      {string}     xml     the xml
     * @return     {JSON}         resolves to a JSON representation of the HTML
     */
    toJSON(xml) {
        const parseOptions = this.getParseOptions();
        log('parseOption', parseOptions);
        return fast_xml_parser_1.default.parse(xml, parseOptions);
    }
    /**
     * returns the XML document for the request
     *
     * @private
     * @param      {Fields}  fields  the fields
     * @return     {String}           The XML string of the Request
     */
    toXML(fields) {
        const HEADING = '<?xml version="1.0" encoding="utf-8"?>';
        return HEADING + XMLRequest.j2x.parse({
            [this.callName + 'Request']: {
                '@_xmlns': this.config.xmlns,
                ...this.getCredentials(),
                ...fields
            }
        });
    }
    /**
     * Call the xml api endpoint.
     *
     * @private
     * @return     {Promise}           resolves to the response
     *
     */
    async request() {
        const xml = this.toXML(this.fields);
        log('xml', xml);
        try {
            const { body, headers = {} } = this.config.hook?.(xml) ?? { body: xml };
            const config = {
                headers: {
                    ...this.getHeaders(),
                    ...(headers ? headers : {})
                }
            };
            log('config', config);
            const response = await this.req.post(this.config.endpoint, body, config);
            log('response', response);
            if (this.config.returnResponse) {
                return response;
            }
            const { data } = response;
            // return raw XML
            if (this.config.raw) {
                return data;
            }
            const json = this.xml2JSON(data);
            (0, errors_1.checkEBayResponse)(json);
            return json;
        }
        catch (error) {
            log('error', error);
            if (error.response?.data) {
                const json = this.toJSON(error.response.data);
                (0, errors_1.checkEBayResponse)(json);
            }
            throw error;
        }
    }
    xml2JSON(xml) {
        const json = this.toJSON(xml);
        // Unwrap
        return json[this.getResponseWrapper()] ?? json;
    }
}
exports.default = XMLRequest;
XMLRequest.j2x = new fast_xml_parser_1.j2xParser(exports.defaultJSON2XMLOptions);
//# sourceMappingURL=XMLRequest.js.map