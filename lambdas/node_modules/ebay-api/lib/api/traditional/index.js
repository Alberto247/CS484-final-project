"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const qs_1 = require("qs");
const __1 = __importDefault(require("../"));
const errors_1 = require("../../errors");
const clientAlerts_1 = __importDefault(require("./clientAlerts"));
const finding_1 = __importDefault(require("./finding"));
const merchandising_1 = __importDefault(require("./merchandising"));
const shopping_1 = __importDefault(require("./shopping"));
const trading_1 = __importDefault(require("./trading"));
const XMLRequest_1 = __importStar(require("./XMLRequest"));
/**
 * Traditional eBay API.
 */
class Traditional extends __1.default {
    constructor() {
        super(...arguments);
        this.createXMLRequest = (callName, api) => async (fields, opts) => {
            const apiConfig = { ...XMLRequest_1.defaultApiConfig, ...opts };
            try {
                return await this.request(apiConfig, api, callName, fields);
            }
            catch (error) {
                // Try to refresh the token.
                if (this.config.autoRefreshToken && (error.name === errors_1.EBayIAFTokenExpired.name || error.name === errors_1.EBayIAFTokenInvalid.name)) {
                    return await this.request(apiConfig, api, callName, fields, true);
                }
                throw error;
            }
        };
    }
    createTradingApi() {
        if (!this.config.devId) {
            throw new Error('devId is required for trading API.');
        }
        if (typeof this.config.siteId !== 'number') {
            throw new Error('siteId is required for trading API.');
        }
        return this.createTraditionalXMLApi({
            endpoint: {
                production: 'https://api.ebay.com/ws/api.dll',
                sandbox: 'https://api.sandbox.ebay.com/ws/api.dll'
            },
            calls: trading_1.default,
            xmlns: 'urn:ebay:apis:eBLBaseComponents',
            headers: (callName, accessToken) => ({
                'X-EBAY-API-CALL-NAME': callName,
                'X-EBAY-API-CERT-NAME': this.config.certId,
                'X-EBAY-API-APP-NAME': this.config.appId,
                'X-EBAY-API-DEV-NAME': this.config.devId,
                'X-EBAY-API-SITEID': this.config.siteId,
                'X-EBAY-API-COMPATIBILITY-LEVEL': 967,
                ...(accessToken && { 'X-EBAY-API-IAF-TOKEN': accessToken })
            })
        });
    }
    createShoppingApi() {
        if (typeof this.config.siteId !== 'number') {
            throw new Error('siteId is required for shopping API.');
        }
        return this.createTraditionalXMLApi({
            endpoint: {
                production: 'https://open.api.ebay.com/shopping',
                sandbox: 'https://open.api.sandbox.ebay.com/shopping'
            },
            xmlns: 'urn:ebay:apis:eBLBaseComponents',
            calls: shopping_1.default,
            headers: (callName, accessToken) => ({
                'X-EBAY-API-CALL-NAME': callName,
                // 'X-EBAY-API-APP-ID': this.config.appId, deprecated  on June 30, 2021
                'X-EBAY-API-SITE-ID': this.config.siteId,
                'X-EBAY-API-VERSION': 863,
                'X-EBAY-API-REQUEST-ENCODING': 'xml',
                ...(accessToken && { 'X-EBAY-API-IAF-TOKEN': accessToken })
            })
        });
    }
    createFindingApi() {
        return this.createTraditionalXMLApi({
            endpoint: {
                production: 'https://svcs.ebay.com/services/search/FindingService/v1',
                sandbox: 'https://svcs.sandbox.ebay.com/services/search/FindingService/v1'
            },
            xmlns: 'http://www.ebay.com/marketplace/search/v1/services',
            calls: finding_1.default,
            headers: (callName) => ({
                'X-EBAY-SOA-SECURITY-APPNAME': this.config.appId,
                'X-EBAY-SOA-OPERATION-NAME': callName
            })
        });
    }
    createClientAlertsApi() {
        if (typeof this.config.siteId !== 'number') {
            throw new Error('siteId is required for client alerts API.');
        }
        const api = {
            endpoint: {
                production: 'https://clientalerts.ebay.com/ws/ecasvc/ClientAlerts',
                sandbox: 'https://clientalerts.sandbox.ebay.com/ws/ecasvc/ClientAlerts'
            },
            calls: clientAlerts_1.default
        };
        const endpoint = api.endpoint[this.config.sandbox ? 'sandbox' : 'production'];
        const paramsSerializer = (args) => {
            return (0, qs_1.stringify)(args, { allowDots: true })
                .replace(/%5B/gi, '(')
                .replace(/%5D/gi, ')');
        };
        const params = {
            appid: this.config.appId,
            siteid: this.config.siteId,
            version: 643
        };
        const service = {};
        Object.keys(api.calls).forEach((callName) => {
            service[callName] = async (fields) => {
                return this.req.get(endpoint, {
                    paramsSerializer,
                    params: {
                        ...params,
                        ...fields,
                        callname: callName
                    }
                });
            };
        });
        return service;
    }
    createMerchandisingApi() {
        return this.createTraditionalXMLApi({
            endpoint: {
                production: 'https://svcs.ebay.com/MerchandisingService',
                sandbox: 'https://svcs.sandbox.ebay.com/MerchandisingService'
            },
            xmlns: 'http://www.ebay.com/marketplace/services',
            calls: merchandising_1.default,
            headers: (callName) => ({
                'EBAY-SOA-CONSUMER-ID': this.config.appId,
                'X-EBAY-SOA-OPERATION-NAME': callName
            })
        });
    }
    createBusinessPolicyManagementApi() {
        throw new Error('Important! This API is deprecated and will be decommissioned on January 31, 2022. We recommend that you migrate to the fulfillment_policy, payment_policy, and return_policy resources of the Account API to set up and manage all of your fulfillment, payment, and return business policies.');
    }
    async request(apiConfig, api, callName, fields, refreshToken = false) {
        try {
            if (refreshToken) {
                await this.auth.OAuth2.refreshToken();
            }
            const config = this.getConfig(api, callName, apiConfig);
            const xmlRequest = new XMLRequest_1.default(callName, fields, config, this.req);
            return await xmlRequest.request();
        }
        catch (e) {
            (0, errors_1.handleEBayError)(e);
        }
    }
    getConfig(api, callName, apiConfig) {
        const eBayAuthToken = this.auth.authNAuth.eBayAuthToken;
        const userAccessToken = this.auth.OAuth2.getUserAccessToken();
        const useIaf = (!eBayAuthToken || userAccessToken && apiConfig.useIaf);
        return {
            ...apiConfig,
            xmlns: api.xmlns,
            endpoint: api.endpoint[this.config.sandbox ? 'sandbox' : 'production'],
            headers: {
                ...api.headers(callName, userAccessToken && useIaf ? userAccessToken : undefined),
                ...apiConfig.headers
            },
            ...(eBayAuthToken && !useIaf && {
                eBayAuthToken
            })
        };
    }
    createTraditionalXMLApi(traditionalApi) {
        const api = {};
        Object.keys(traditionalApi.calls).forEach((callName) => {
            api[callName] = this.createXMLRequest(callName, traditionalApi);
        });
        return api;
    }
}
exports.default = Traditional;
//# sourceMappingURL=index.js.map