import Restful from '../../';
/**
 * The Finances API is used by sellers in eBay's managed payments program to retrieve seller payout information.
 *
 * https://api.ebay.com/oauth/api_scope/sell.finances
 *
 */
export default class Finances extends Restful {
    static id: string;
    get basePath(): string;
    get subdomain(): string;
    /**
     * Use this call to retrieve the details of a specific seller payout.
     *
     * @param payoutId The unique identifier of the payout.
     */
    getPayout(payoutId: string): Promise<any>;
    /**
     * Use this call to search for and retrieve one or more payout based on their payout date,
     * or payout status using the filter parameter.
     *
     * @param filter One or more comma-separated criteria for narrowing down the collection of payout returned by this
     *     call.
     * @param limit The number of payouts to return per page of the result set.
     * @param offset Specifies the number of payouts to skip in the result set before returning the first payout in the
     *     paginated response.
     * @param sort Allows sorting by payouts date in descending order with '-payoutDate' (default) and ascending with 'payoutDate'
     */
    getPayouts({ filter, limit, offset, sort, }?: {
        filter?: string;
        limit?: number;
        offset?: number;
        sort?: 'payoutDate' | '-payoutDate';
    }): Promise<any>;
    /**
     *  Search for and retrieve the details of multiple payouts.
     *  *
     * @param filter One or more comma-separated criteria for narrowing down the collection of payout returned by this
     *     call.
     */
    getPayoutSummary({ filter, }?: {
        filter?: string;
    }): Promise<any>;
    /**
     * Retrieve details of one or more monetary transactions.
     * @param filter One or more comma-separated criteria for narrowing down the collection of transaction returned by this
     *     call.
     * @param limit The number of transaction to return per page of the result set.
     * @param offset Specifies the number of payouts to skip in the result set before returning the first transaction in the
     *     paginated response.
     * @param sort Allows sorting by transaction date in descending order with '-transactionDate' (default) and ascending with 'transactionDate'
     */
    getTransactions({ filter, limit, offset, sort }?: {
        filter?: string;
        limit?: number;
        offset?: number;
        sort?: 'transactionDate' | '-transactionDate';
    }): Promise<any>;
    /**
     * Retrieve total counts and values of the seller's order sales, seller credits, buyer refunds, and payment holds.
     * @param filter One or more comma-separated criteria for narrowing down the collection of transaction returned by this
     *     call.
     * @param limit The number of transaction to return per page of the result set.
     */
    getTransactionSummary({ filter, }?: {
        filter?: string;
    }): Promise<any>;
    /**
     * Retrieve detailed information on a TRANSFER transaction type.
     *
     * @param transferId The unique identifier of the transfer.
     */
    getTransfer(transferId: string): Promise<any>;
    /**
     *  Retrieve all pending funds that have not yet been distributed through a seller payout.
     */
    getSellerFundsSummary(): Promise<any>;
}
