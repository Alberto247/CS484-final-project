"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const api_1 = __importDefault(require("./api"));
const apiFactory_1 = __importDefault(require("./api/apiFactory"));
const enums_1 = require("./enums");
const errors_1 = require("./errors");
const defaultConfig = {
    sandbox: false,
    autoRefreshToken: true,
    siteId: enums_1.SiteId.EBAY_US,
    marketplaceId: enums_1.MarketplaceId.EBAY_US,
    acceptLanguage: enums_1.Locale.en_US,
    contentLanguage: enums_1.ContentLanguage.en_US
};
// tslint:disable-next-line:class-name
class eBayApi extends api_1.default {
    /**
     * @param {AppConfig} config the app config
     * @param {IEBayApiRequest} req the request
     */
    constructor(config, req) {
        super({ ...defaultConfig, ...config }, req);
        this.factory = new apiFactory_1.default(this.config, this.req, this.auth);
        // Shortcuts
        this.authNAuth = this.auth.authNAuth;
        this.OAuth2 = this.auth.OAuth2;
        this.oAuth2 = this.OAuth2;
    }
    /**
     * Loads config from `process.env`
     *
     * @return {eBayApi} a new eBayApi instance
     * @param {request} req request
     * @throws {ApiEnvError}
     */
    static fromEnv(req) {
        if (!process.env.EBAY_APP_ID) {
            throw new errors_1.ApiEnvError('EBAY_APP_ID');
        }
        if (!process.env.EBAY_CERT_ID) {
            throw new errors_1.ApiEnvError('EBAY_CERT_ID');
        }
        return new eBayApi({
            appId: process.env.EBAY_APP_ID,
            certId: process.env.EBAY_CERT_ID,
            devId: process.env.EBAY_DEV_ID,
            authToken: process.env.EBAY_AUTH_TOKEN,
            siteId: process.env.EBAY_SITE_ID ? parseInt(process.env.EBAY_SITE_ID, 10) : enums_1.SiteId.EBAY_US,
            marketplaceId: process.env.EBAY_MARKETPLACE_ID && process.env.EBAY_MARKETPLACE_ID in enums_1.MarketplaceId ?
                enums_1.MarketplaceId[process.env.EBAY_MARKETPLACE_ID] :
                enums_1.MarketplaceId.EBAY_US,
            ruName: process.env.EBAY_RU_NAME,
            sandbox: (process.env.EBAY_SANDBOX === 'true')
        }, req);
    }
    get buy() {
        return this._buy || (this._buy = this.factory.createBuyApi());
    }
    get commerce() {
        return this._commerce || (this._commerce = this.factory.createCommerceApi());
    }
    get developer() {
        return this._developer || (this._developer = this.factory.createDeveloperApi());
    }
    get postOrder() {
        return this._postOrder || (this._postOrder = this.factory.createPostOrderApi());
    }
    get sell() {
        return this._sell || (this._sell = this.factory.createSellApi());
    }
    // Traditional
    get trading() {
        return this._trading || (this._trading = this.factory.createTradingApi());
    }
    get finding() {
        return this._finding || (this._finding = this.factory.createFindingApi());
    }
    get shopping() {
        return this._shopping || (this._shopping = this.factory.createShoppingApi());
    }
    get clientAlerts() {
        return this._clientAlerts || (this._clientAlerts = this.factory.createClientAlertsApi());
    }
    get merchandising() {
        return this._merchandising || (this._merchandising = this.factory.createMerchandisingApi());
    }
}
eBayApi.default = eBayApi;
eBayApi.SiteId = enums_1.SiteId;
eBayApi.MarketplaceId = enums_1.MarketplaceId;
eBayApi.ContentLanguage = enums_1.ContentLanguage;
eBayApi.Locale = enums_1.Locale;
module.exports = eBayApi;
//# sourceMappingURL=index.js.map